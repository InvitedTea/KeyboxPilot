import { CloudArrowUpIcon } from "@heroicons/react/20/solid";
import { AppButton } from "../components/AppButton";
import Link from 'next/link';
import { useRouter } from 'next/router';
import AppPreviewContract from "../components/AppPreviewContract";
import React, { useState } from 'react';

import { XMTPProvider } from "@xmtp/react-sdk";

createRoot(document.getElementById("root") as HTMLElement).render(
  <StrictMode>
    <XMTPProvider>
      <App />
    </XMTPProvider>
  </StrictMode>,
);


export default function Analyze() {
  const router = useRouter();
  const { result } = router.query;

  // Ensure result is a valid JSON string before parsing
  let parsedResult = {};
  try {
    parsedResult = JSON.parse(result as string);
  } catch (error) {
    console.error("Failed to parse result:", error);
  }

  // Split the stringified JSON by newline characters
  //const lines = JSON.stringify(parsedResult, null, 2).split('\n');
  const content = parsedResult.predictions?.[0]?.content;


  const [isUploading, setIsUploading] = useState(false);

  const uploadToStorage = async () => {
    setIsUploading(true);
    try {
      const response = await fetch('/api/uploadToWeb3', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content: content }),
      });
      const data = await response.json();
      if (data.cid) {
        console.log("Successfully uploaded with CID:", data.cid);
      } else {
        console.error("Upload failed:", data.error);
      }
    } catch (error) {
      console.error("Error:", error);
    }
    setIsUploading(false);
  };




  return (
    <div>
      <h1>Analyze Smart Contract</h1>
      
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
        <div style={{ flex: 1, maxWidth: '48%', marginRight: '2%' }}>
          <AppPreviewContract />
        </div>
        <div style={{ flex: 1, maxWidth: '48%', marginLeft: '2%' }}>
          <h2>Analysis Result:</h2>
          <pre style={{ whiteSpace: 'pre-wrap', wordWrap: 'break-word', overflowWrap: 'break-word' }}><code>{content}</code></pre>
          
          
          <div style={{ 
    backgroundColor: '#FFC0CB', // Pink background
    padding: '15px', // Padding to give some space around the text
    borderRadius: '10px', // Rounded corners for aesthetics
    margin: '15px 0', // Vertical margin for separation from other elements
    border: '1px solid #FF69B4', // A slightly darker pink border
    color: 'black'  // Black font color
}}>
    <strong>Disclaimer:</strong> The risk assessment provided is generated by a large language model developed by Google. Its limited knowledge may only sometimes reflect the most current or complete information. We do not take responsibility for any decisions made based on this assessment. Trusting and interacting with smart contracts can be risky. We advise users to exercise caution and conduct their due diligence. We are not liable for any financial loss or damages incurred due to trusting or acting upon the provided assessment.
</div>


<AppButton onClick={uploadToStorage} icon={<CloudArrowUpIcon width={20} />} disabled={isUploading}>
        {isUploading ? 'Uploading...' : 'Upload Report to Web3 Storage for Further Research'}
      </AppButton>

        </div>

        
      </div>


      <Link href="/">Go back to home</Link>
    </div>
);

}

